{"version":3,"sources":["./node_modules/ngx-captcha/__ivy_ngcc__/fesm2015/ngx-captcha.js","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/auth.page.ts","./src/app/auth/gr-validate/gr-validate.component.ts","./src/app/auth/register/register.component.ts","./src/app/auth/validate/validate.component.ts","./src/app/auth/auth.page.scss","./src/app/auth/gr-validate/gr-validate.component.scss","./src/app/auth/register/register.component.scss","./src/app/auth/validate/validate.component.scss","./src/app/auth/auth.page.html","./src/app/auth/gr-validate/gr-validate.component.html","./src/app/auth/register/register.component.html","./src/app/auth/validate/validate.component.html"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAA4J;AAC9F;AACf;;AAE/C;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACwC;;AAExC;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gEAAgE,EAAE;AAClE,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sBAAsB,GAAG;AACzB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,8BAA8B,OAAO,2BAA2B,kCAAkC,UAAU,OAAO,EAAE,gCAAgC;AACrJ;AACA;AACA,wDAAwD,iCAAiC,sDAAe,CAAC,iDAAa,GAAG;AACzH,oCAAoC,gEAAyB,EAAE,oDAAoD;AACnH;AACA;AACA,KAAK,OAAO,iDAAM;AAClB;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,qDAAU;AACxB,KAAK,gBAAgB,UAAU,OAAO,iDAAa,EAAE,EAAE,EAAE,QAAQ,EAAE;AACnE,IAAI,KAAK,EAAE,EA4BV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAY;AACvC;AACA;AACA;AACA,wBAAwB,uDAAY;AACpC;AACA;AACA;AACA,yBAAyB,uDAAY;AACrC;AACA;AACA;AACA,yBAAyB,uDAAY;AACrC;AACA;AACA;AACA,yBAAyB,uDAAY;AACrC;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yCAAyC,qDAAS;AAClD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,0CAA0C,+DAAwB,CAAC,oDAAgB,GAAG,+DAAwB,CAAC,iDAAa,GAAG,+DAAwB,CAAC,mDAAe,GAAG,+DAAwB,iBAAiB;AAC7R,4CAA4C,+DAAwB,EAAE,wCAAwC,uGAAuG,YAAY,qGAAqG,aAAa,kEAA2B,GAAG;AACjX;AACA;AACA,KAAK,OAAO,oDAAS,EAAE;AACvB,KAAK,OAAO,iDAAM,EAAE;AACpB,KAAK,OAAO,mDAAQ,EAAE;AAC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AAE,GAAG,OAAO,mDAAe,EAAE,GAAG,sBAAsB,EAAE,EAAE,GAAG;AAC5I,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAS;AAC3B,0CAA0C,gBAAgB;AAC1D,SAAS,GAAG,EAAE,EAAE;AAChB,IAAI,KAAK,EAAE,EAiDV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC,+DAAwB,CAAC,oDAAgB,GAAG,+DAAwB,CAAC,iDAAa,GAAG,+DAAwB,CAAC,mDAAe,GAAG,+DAAwB,iBAAiB;AACpR,yCAAyC,+DAAwB,EAAE,qHAAqH;AACxL,QAAQ,yDAAkB;AAC1B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,yCAAyC,aAAa,gEAAyB;AACjG;AACA,yBAAyB,6DAAiB;AAC1C,6BAA6B,yDAAU;AA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","file":"src_app_auth_auth_module_ts.js","sourcesContent":["import { Injectable, NgZone, EventEmitter, Directive, Renderer2, Injector, Input, Output, Component, forwardRef, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/script.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"captchaWrapperElem\"];\nclass ScriptService {\r\n    /**\r\n     * @param {?} zone\r\n     */\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = 'grecaptcha';\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n        this.globalDomain = 'recaptcha.net';\r\n        this.defaultDomain = 'google.com';\r\n    }\r\n    /**\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?} onLoad\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            }));\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = (/** @type {?} */ (((/**\r\n         * @return {?}\r\n         */\r\n        () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]))))));\r\n        // prepare script elem\r\n        /** @type {?} */\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    cleanup() {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    grecaptchaScriptLoaded() {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     * @private\r\n     * @param {?=} hl\r\n     * @return {?}\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n     * Url to google api script\r\n     * @private\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    getCaptchaScriptUrl(useGlobalDomain, render, language) {\r\n        /** @type {?} */\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\nScriptService.ɵfac = function ScriptService_Factory(t) { return new (t || ScriptService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nScriptService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScriptService, factory: ScriptService.ɵfac });\r\n/** @nocollapse */\r\nScriptService.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScriptService, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.windowGrecaptcha;\r\n    /**\r\n     * Name of the global callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.windowOnLoadCallbackProperty;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.globalDomain;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.defaultDomain;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/base-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass BaseReCaptchaComponent {\r\n    /**\r\n     * @protected\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = 'ngx_captcha_id_';\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = 'image';\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl).control;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     * @return {?}\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     * @return {?}\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     * @return {?}\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     * @return {?}\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     * @return {?}\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} captchaElemId\r\n     * @return {?}\r\n     */\r\n    ensureCaptchaElem(captchaElemId) {\r\n        /** @type {?} */\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @protected\r\n     * @param {?} callback Callback\r\n     * @return {?}\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        }));\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (/**\r\n         * @param {?} grecaptcha\r\n         * @return {?}\r\n         */\r\n        (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }), this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     * @private\r\n     * @param {?} grecapcha\r\n     * @return {?}\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n        // create new wrapper for captcha\r\n        /** @type {?} */\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n        setTimeout((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // update captcha elem\r\n            if (this.captchaElemId) {\r\n                this.ensureCaptchaElem(this.captchaElemId);\r\n            }\r\n        }), 0);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        }));\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\nBaseReCaptchaComponent.ɵfac = function BaseReCaptchaComponent_Factory(t) { return new (t || BaseReCaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };\nBaseReCaptchaComponent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseReCaptchaComponent, inputs: { useGlobalDomain: \"useGlobalDomain\", type: \"type\", tabIndex: \"tabIndex\", siteKey: \"siteKey\", hl: \"hl\" }, outputs: { success: \"success\", load: \"load\", reset: \"reset\", ready: \"ready\", error: \"error\", expire: \"expire\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\n/** @nocollapse */\r\nBaseReCaptchaComponent.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nBaseReCaptchaComponent.propDecorators = {\r\n    siteKey: [{ type: Input }],\r\n    useGlobalDomain: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    tabIndex: [{ type: Input }],\r\n    success: [{ type: Output }],\r\n    load: [{ type: Output }],\r\n    reset: [{ type: Output }],\r\n    ready: [{ type: Output }],\r\n    error: [{ type: Output }],\r\n    expire: [{ type: Output }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseReCaptchaComponent, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { useGlobalDomain: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], success: [{\n            type: Output\n        }], load: [{\n            type: Output\n        }], reset: [{\n            type: Output\n        }], ready: [{\n            type: Output\n        }], error: [{\n            type: Output\n        }], expire: [{\n            type: Output\n        }], siteKey: [{\n            type: Input\n        }], hl: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * Prefix of the captcha element\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElemPrefix;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupCaptcha;\r\n    /**\r\n     * Google's site key.\r\n     * You can find this under https://www.google.com/recaptcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.siteKey;\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.useGlobalDomain;\r\n    /**\r\n     * Type\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.type;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.hl;\r\n    /**\r\n     * Tab index\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.tabIndex;\r\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.success;\r\n    /**\r\n     * Called when captcha is loaded. Event receives id of the captcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.load;\r\n    /**\r\n     * Called when captcha is reset.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reset;\r\n    /**\r\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.ready;\r\n    /**\r\n     * Error callback\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.error;\r\n    /**\r\n     * Expired callback\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.expire;\r\n    /** @type {?} */\r\n    BaseReCaptchaComponent.prototype.captchaWrapperElem;\r\n    /**\r\n     * Indicates if captcha should be set on load\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupAfterLoad;\r\n    /**\r\n     * Captcha element\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElem;\r\n    /**\r\n     * Id of the captcha elem\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaId;\r\n    /**\r\n     * Holds last response value\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.currentResponse;\r\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.resetCaptchaAfterSuccess;\r\n    /**\r\n     * Captcha type\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.recaptchaType;\r\n    /**\r\n     * Required by ControlValueAccessor\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.onChange;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.onTouched;\r\n    /**\r\n     * Indicates if captcha is loaded\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.isLoaded;\r\n    /**\r\n     * Reference to global reCaptcha API\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reCaptchaApi;\r\n    /**\r\n     * Id of the DOM element wrapping captcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElemId;\r\n    /**\r\n     * Form Control to be enable usage in reactive forms\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.control;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.scriptService;\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @abstract\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.getCaptchaProperties = function () { };\r\n    /**\r\n     * Used for captcha specific setup\r\n     * @abstract\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaSpecificSetup = function () { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/recaptcha-type.enum.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst ReCaptchaType = {\r\n    InvisibleReCaptcha: 0,\r\n    ReCaptcha2: 1,\r\n};\r\nReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';\r\nReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/invisible-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponent {\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     * @return {?}\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => this.reCaptchaApi.execute(this.captchaId)));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            (response) => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleCallback(response)))),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleExpireCallback()))),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleErrorCallback()))),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\nInvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(t) { return new (t || InvisibleReCaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };\nInvisibleReCaptchaComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: InvisibleReCaptchaComponent, selectors: [[\"ngx-invisible-recaptcha\"]], viewQuery: function InvisibleReCaptchaComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    } }, inputs: { theme: \"theme\", badge: \"badge\", hl: \"hl\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(( /**\n                 * @return {?}\n                 */() => InvisibleReCaptchaComponent)),\n                multi: true\n            }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[\"captchaWrapperElem\", \"\"]], template: function InvisibleReCaptchaComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\r\n/** @nocollapse */\r\nInvisibleReCaptchaComponent.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nInvisibleReCaptchaComponent.propDecorators = {\r\n    theme: [{ type: Input }],\r\n    badge: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InvisibleReCaptchaComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-invisible-recaptcha',\n                template: `\r\n  <div #captchaWrapperElem></div>`,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(( /**\n                         * @return {?}\n                         */() => InvisibleReCaptchaComponent)),\n                        multi: true\n                    }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { theme: [{\n            type: Input\n        }], badge: [{\n            type: Input\n        }], hl: [{\n            type: Input\n        }], captchaWrapperElem: [{\n            type: ViewChild,\n            args: ['captchaWrapperElem', { static: false }]\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * This size representing invisible captcha\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.size;\r\n    /**\r\n     * Theme\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.theme;\r\n    /**\r\n     * Badge\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.badge;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.hl;\r\n    /** @type {?} */\r\n    InvisibleReCaptchaComponent.prototype.captchaWrapperElem;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.recaptchaType;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/recaptcha-2.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ReCaptcha2Component extends BaseReCaptchaComponent {\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Name of the global expire callback\r\n         */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n         * Name of the global error callback\r\n         */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Size\r\n         */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            (response) => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleCallback(response)))),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleExpireCallback()))),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleErrorCallback()))),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\nReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(t) { return new (t || ReCaptcha2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };\nReCaptcha2Component.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ReCaptcha2Component, selectors: [[\"ngx-recaptcha2\"]], viewQuery: function ReCaptcha2Component_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    } }, inputs: { theme: \"theme\", size: \"size\", hl: \"hl\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(( /**\n                 * @return {?}\n                 */() => ReCaptcha2Component)),\n                multi: true\n            }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[\"captchaWrapperElem\", \"\"]], template: function ReCaptcha2Component_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\r\n/** @nocollapse */\r\nReCaptcha2Component.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nReCaptcha2Component.propDecorators = {\r\n    theme: [{ type: Input }],\r\n    size: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReCaptcha2Component, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-recaptcha2',\n                template: `\r\n  <div #captchaWrapperElem></div>`,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(( /**\n                         * @return {?}\n                         */() => ReCaptcha2Component)),\n                        multi: true\n                    }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { theme: [{\n            type: Input\n        }], size: [{\n            type: Input\n        }], hl: [{\n            type: Input\n        }], captchaWrapperElem: [{\n            type: ViewChild,\n            args: ['captchaWrapperElem', { static: false }]\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * Name of the global expire callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.windowOnErrorCallbackProperty;\r\n    /**\r\n     * Name of the global error callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.windowOnExpireCallbackProperty;\r\n    /**\r\n     * Theme\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.theme;\r\n    /**\r\n     * Size\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.size;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.hl;\r\n    /** @type {?} */\r\n    ReCaptcha2Component.prototype.captchaWrapperElem;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.recaptchaType;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/recaptcha_v3.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ReCaptchaV3Service {\r\n    /**\r\n     * @param {?} scriptService\r\n     * @param {?} zone\r\n     */\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?} callback Callback function to to handle token\r\n     * @param {?=} config Optional configuration like useGlobalDomain to be provided\r\n     * @param {?=} errorCallback Optional Callback function to handle errors\r\n     * @return {?}\r\n     */\r\n    execute(siteKey, action, callback, config, errorCallback) {\r\n        this.executeAsPromise(siteKey, action, config)\r\n            .then(callback)\r\n            .catch((/**\r\n         * @param {?} error\r\n         * @return {?}\r\n         */\r\n        (error) => errorCallback ? errorCallback(error) : console.error(error)));\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    executeAsPromise(siteKey, action, config) {\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            /** @type {?} */\r\n            const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n            /** @type {?} */\r\n            const onRegister = (/**\r\n             * @param {?} grecaptcha\r\n             * @return {?}\r\n             */\r\n            grecaptcha => {\r\n                this.zone.runOutsideAngular((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action })\r\n                            .then((/**\r\n                         * @param {?} token\r\n                         * @return {?}\r\n                         */\r\n                        token => this.zone.run((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => resolve(token)))));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                }));\r\n            });\r\n            this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);\r\n        }));\r\n    }\r\n}\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) { return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(ScriptService), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nReCaptchaV3Service.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ReCaptchaV3Service, factory: ReCaptchaV3Service.ɵfac });\r\n/** @nocollapse */\r\nReCaptchaV3Service.ctorParameters = () => [\r\n    { type: ScriptService },\r\n    { type: NgZone }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n        type: Injectable\n    }], function () { return [{ type: ScriptService }, { type: ɵngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptchaV3Service.prototype.scriptService;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptchaV3Service.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-captcha.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxCaptchaModule {\r\n}\nNgxCaptchaModule.ɵfac = function NgxCaptchaModule_Factory(t) { return new (t || NgxCaptchaModule)(); };\nNgxCaptchaModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxCaptchaModule });\nNgxCaptchaModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ScriptService,\n        ReCaptchaV3Service\n    ], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxCaptchaModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    ReCaptcha2Component,\n                    InvisibleReCaptchaComponent\n                ],\n                providers: [\n                    ScriptService,\n                    ReCaptchaV3Service\n                ],\n                exports: [\n                    ReCaptcha2Component,\n                    InvisibleReCaptchaComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCaptchaModule, { declarations: function () { return [ReCaptcha2Component, InvisibleReCaptchaComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ReCaptcha2Component, InvisibleReCaptchaComponent]; } }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ngx-captcha.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n\n//# sourceMappingURL=ngx-captcha.js.map","import { GrValidateComponent } from './gr-validate/gr-validate.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthPage } from './auth.page';\nimport { RegisterComponent } from './register/register.component';\nimport { ValidateComponent } from './validate/validate.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'login',\n    pathMatch: 'full',\n  },\n  {\n    path: 'register',\n    component: RegisterComponent,\n  },\n  {\n    path: 'validate/:id',\n    component: ValidateComponent,\n  },\n  {\n    path: 'validategr/:id',\n    component: GrValidateComponent,\n  },\n  {\n    path: 'login',\n    component: AuthPage,\n  },\n  {\n    path: 'forgot',\n    loadChildren: () => import('./forgot/forgot.module').then( m => m.ForgotPageModule)\n  },\n  {\n    path: 'reset',\n    loadChildren: () => import('./reset/reset.module').then( m => m.ResetPageModule)\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthPageRoutingModule {}\n","import { GrValidateComponent } from './gr-validate/gr-validate.component';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AuthPageRoutingModule } from './auth-routing.module';\nimport { RegisterComponent } from './register/register.component';\nimport { ValidateComponent } from './validate/validate.component';\nimport { NgxCaptchaModule } from 'ngx-captcha';\n\nimport { AuthPage } from './auth.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    AuthPageRoutingModule,\n    NgxCaptchaModule\n  ],\n  declarations: [AuthPage, RegisterComponent, ValidateComponent, GrValidateComponent],\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ]\n\n})\nexport class AuthPageModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoadingController, ToastController } from '@ionic/angular';\nimport { first } from 'rxjs/operators';\nimport { AuthService } from '../_services/auth.service';\nimport { ReCaptcha2Component } from 'ngx-captcha';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.page.html',\n  styleUrls: ['./auth.page.scss'],\n})\nexport class AuthPage implements OnInit {\n  @ViewChild('captchaElem') captchaElem: ReCaptcha2Component;\n  @ViewChild('langInput') langInput: ElementRef;\n\n  public captchaIsLoaded = false;\n  public captchaSuccess = false;\n  public captchaIsExpired = false;\n  public captchaResponse?: string;\n\n  public theme: 'light' | 'dark' = 'dark';\n  public size: 'compact' | 'normal' = 'normal';\n  public lang = 'en';\n  public type: 'image' | 'audio';\n\n  loginForm: any;\n  model: any = {};\n  error: any;\n  showPass = false;\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthService,\n    private loadingController: LoadingController,\n    private toastController: ToastController\n  ) {\n    if (this.authenticationService.userValue) {\n      this.router.navigate(['/tabs']);\n    }\n  }\n\n  ngOnInit() {}\n\n  async presentToast(color, message) {\n    const toast = await this.toastController.create({\n      message,\n      color,\n      duration: 1000,\n    });\n    toast.present();\n  }\n  async onSubmit() {\n    // console.log(this.model);\n    const loading = await this.loadingController.create({\n      spinner: null,\n      cssClass: 'custom-loading',\n    });\n    await loading.present();\n    // this.loading = true;\n    this.authenticationService\n      .login(this.model.email, this.model.password, this.model.gresponse)\n      .pipe(first())\n      .subscribe(\n        async (res: any) => {\n          await loading.dismiss();\n          if (res.status === 'success') {\n            const color = 'success';\n            this.presentToast(color, res.message);\n            // const api_token = res.result.api_token;\n            const returnUrl =\n              this.route.snapshot.queryParams.returnUrl || '/tabs';\n            this.router.navigateByUrl(returnUrl);\n          } else {\n            const color = 'danger';\n            this.presentToast(color, res.message);\n            this.error = res.message;\n            // this.loading = false;\n          }\n        },\n        async (err) => {\n          await loading.dismiss();\n          this.error = err;\n        }\n      );\n  }\n\n  handleSuccess(event) {\n    // console.log('e', event);\n  }\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoadingController, ToastController } from '@ionic/angular';\nimport { first } from 'rxjs/operators';\nimport { AuthService } from 'src/app/_services/auth.service';\n\n@Component({\n  selector: 'app-gr-validate',\n  templateUrl: './gr-validate.component.html',\n  styleUrls: ['./gr-validate.component.scss'],\n})\nexport class GrValidateComponent implements OnInit {\n\n  validateForm;\n  model: any = {};\n  // tslint:disable-next-line: variable-name\n  greenroom_token: string;\n  // tslint:disable-next-line: variable-name\n  api_token: string;\n  error: any;\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthService,\n    private loadingController: LoadingController,\n    private toastController: ToastController\n  ) { }\n\n  async ngOnInit() {\n    const data = await localStorage.getItem('greenroom_token');\n    this.greenroom_token = data;\n\t\t// alert(this.ch_token);\n\t\t  this.api_token = this.route.snapshot.paramMap.get('id');\n  }\n\n  async presentToast(color, message) {\n    const toast = await this.toastController.create({\n      message,\n      color,\n      duration: 1000\n    });\n    toast.present();\n  }\n\n  async onSubmit() {\n    const loading = await this.loadingController.create({\n      spinner: null,\n      cssClass: 'custom-loading'\n      });\n    await loading.present();\n    this.authenticationService\n\t\t\t.validategr(this.api_token, this.model.firstname, this.model.lastname, this.model.ch_username)\n\t\t\t.pipe(first())\n\t\t\t.subscribe(\n        async (res: any) => {\n          await loading.dismiss();\n\t\t\t\t\t// console.log(res);\n          if (res.status === 'success') {\n            const color = 'success';\n            this.presentToast(color, res.message);\n\t\t\t\t\t\t      this.authenticationService\n\t\t\t\t\t\t\t.getDetails(this.api_token)\n\t\t\t\t\t\t\t// tslint:disable-next-line: no-shadowed-variable\n\t\t\t\t\t\t\t.subscribe((_res: any) => {\n\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t// const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/app/home';\n\t\t\t\t\t\t\t\tthis.router.navigateByUrl('/tabs');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this.alertService.danger(res.message);\n            this.error = res.message;\n            const color = 'danger';\n            this.presentToast(color, res.message);\n\t\t\t\t\t\t// this.loading = false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tthis.error = err;\n\t\t\t\t\t// this.loading = false;\n\t\t\t\t}\n\t\t\t);\n  }\n\n  logOut() {\n    // alert(1);\n    this.authenticationService.logout();\n  }\n\n\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoadingController, ToastController } from '@ionic/angular';\nimport { first } from 'rxjs/operators';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { ReCaptcha2Component } from 'ngx-captcha';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  @ViewChild('captchaElem') captchaElem: ReCaptcha2Component;\n  @ViewChild('langInput') langInput: ElementRef;\n\n  public captchaIsLoaded = false;\n  public captchaSuccess = false;\n  public captchaIsExpired = false;\n  public captchaResponse?: string;\n\n  public theme: 'light' | 'dark' = 'light';\n  public size: 'compact' | 'normal' = 'normal';\n  public lang = 'en';\n  public type: 'image' | 'audio';\n\n  registerForm;\n  model: any = {};\n  error: any;\n  showPass = false;\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthService,\n    private loadingController: LoadingController,\n    private toastController: ToastController\n  ) {}\n\n  ngOnInit() {}\n\n  async presentToast(color, message) {\n    const toast = await this.toastController.create({\n      message,\n      color,\n      duration: 1000,\n    });\n    toast.present();\n  }\n  async onSubmit() {\n    // console.log(this.model);\n    const loading = await this.loadingController.create({\n      spinner: null,\n      cssClass: 'custom-loading',\n    });\n    await loading.present();\n    this.authenticationService\n      .register(\n        this.model.email,\n        this.model.password,\n        this.model.name,\n        this.model.gresponse\n      )\n      .pipe(first())\n      .subscribe(\n        async (res: any) => {\n          await loading.dismiss();\n          // console.log(res);\n          if (res.status === 'success') {\n            const color = 'success';\n            this.presentToast(color, res.message);\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            // const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/app/home';\n            this.router.navigateByUrl('/tabs');\n          } else {\n            // this.alertService.danger(res.message);\n            const color = 'danger';\n            this.presentToast(color, res.message);\n            this.error = res.message;\n            // this.loading = false;\n          }\n        },\n        (err) => {\n          this.error = err;\n          console.log(err);\n        }\n      );\n  }\n  handleSuccess(event) {\n    // console.log('e', event);\n  }\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LoadingController, ToastController } from '@ionic/angular';\nimport { first } from 'rxjs/operators';\nimport { AuthService } from 'src/app/_services/auth.service';\n\n@Component({\n  selector: 'app-validate',\n  templateUrl: './validate.component.html',\n  styleUrls: ['./validate.component.scss'],\n})\nexport class ValidateComponent implements OnInit {\n\n  validateForm;\n  model: any = {};\n  // tslint:disable-next-line: variable-name\n  ch_token: string;\n  // tslint:disable-next-line: variable-name\n  api_token: string;\n  error: any;\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthService,\n    private loadingController: LoadingController,\n    private toastController: ToastController\n  ) { }\n\n  async ngOnInit() {\n    const data = await localStorage.getItem('ch_token');\n    this.ch_token = data;\n\t\t// alert(this.ch_token);\n\t\t  this.api_token = this.route.snapshot.paramMap.get('id');\n  }\n\n  async presentToast(color, message) {\n    const toast = await this.toastController.create({\n      message,\n      color,\n      duration: 1000\n    });\n    toast.present();\n  }\n\n  async onSubmit() {\n    const loading = await this.loadingController.create({\n      spinner: null,\n      cssClass: 'custom-loading'\n      });\n    await loading.present();\n    this.authenticationService\n\t\t\t.validate(this.api_token, this.model.ch_username)\n\t\t\t.pipe(first())\n\t\t\t.subscribe(\n        async (res: any) => {\n          await loading.dismiss();\n\t\t\t\t\t// console.log(res);\n          if (res.status === 'success') {\n            const color = 'success';\n            this.presentToast(color, res.message);\n\t\t\t\t\t\t      this.authenticationService\n\t\t\t\t\t\t\t.getDetails(this.api_token)\n\t\t\t\t\t\t\t// tslint:disable-next-line: no-shadowed-variable\n\t\t\t\t\t\t\t.subscribe((_res: any) => {\n\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t// const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/app/home';\n\t\t\t\t\t\t\t\tthis.router.navigateByUrl('/tabs');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this.alertService.danger(res.message);\n            this.error = res.message;\n            const color = 'danger';\n            this.presentToast(color, res.message);\n\t\t\t\t\t\t// this.loading = false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tthis.error = err;\n\t\t\t\t\t// this.loading = false;\n\t\t\t\t}\n\t\t\t);\n  }\n\n  logOut() {\n    // alert(1);\n    this.authenticationService.logout();\n  }\n}\n","export default \"ion-content .logo {\\n  /* width: 30vh; */\\n  height: 30vh;\\n  margin: 0vh auto;\\n  text-align: center;\\n  background: url('socialConnector.jpeg') 0px 0%/100% 100% no-repeat;\\n}\\n\\nion-item.mb {\\n  margin-bottom: 20px !important;\\n}\\n\\n.errors {\\n  font-size: small;\\n  color: red !important;\\n  padding-left: 15px;\\n  padding-top: 5px;\\n  padding-bottom: 5px;\\n}\\n\\n.captchaspace {\\n  width: 100%;\\n  overflow: hidden !important;\\n  text-align: center !important;\\n  background-color: transparent !important;\\n}\\n\\n.white {\\n  margin: 0 auto !important;\\n  background-color: transparent !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGgucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNFO0VBQ0UsaUJBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUVBLGtFQUFBO0FBREo7O0FBS0E7RUFDRSw4QkFBQTtBQUZGOztBQUtBO0VBQ0UsZ0JBQUE7RUFDQSxxQkFBQTtFQUVBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtBQUhGOztBQU1BO0VBRUUsV0FBQTtFQUNBLDJCQUFBO0VBRUEsNkJBQUE7RUFDQSx3Q0FBQTtBQUxGOztBQVFBO0VBSUUseUJBQUE7RUFDQSx3Q0FBQTtBQVJGIiwiZmlsZSI6ImF1dGgucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNvbnRlbnQge1xyXG4gIC5sb2dvIHtcclxuICAgIC8qIHdpZHRoOiAzMHZoOyAqL1xyXG4gICAgaGVpZ2h0OiAzMHZoO1xyXG4gICAgbWFyZ2luOiAwdmggYXV0bztcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIC8vIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi4vLi4vYXNzZXRzL2ltZy9zb2NpYWxDb25uZWN0b3IuanBlZ1wiKSAwcHggMCUvMTAwJSAxMDAlIG5vLXJlcGVhdDtcclxuICB9XHJcbn1cclxuXHJcbmlvbi1pdGVtLm1iIHtcclxuICBtYXJnaW4tYm90dG9tOiAyMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5lcnJvcnMge1xyXG4gIGZvbnQtc2l6ZTogc21hbGw7XHJcbiAgY29sb3I6IHJlZCAhaW1wb3J0YW50O1xyXG4gIC8vIGJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1kYW5nZXIpO1xyXG4gIHBhZGRpbmctbGVmdDogMTVweDtcclxuICBwYWRkaW5nLXRvcDogNXB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiA1cHg7XHJcbn1cclxuXHJcbi5jYXB0Y2hhc3BhY2V7XHJcbiAgLy8gYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbiAhaW1wb3J0YW50O1xyXG4gIC8vIGhlaWdodDogNTBweDtcclxuICB0ZXh0LWFsaWduOmNlbnRlciAhaW1wb3J0YW50O1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcbi53aGl0ZXtcclxuICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcclxuICAvLyBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxuICAvLyB3aWR0aDogNTB2dyAhaW1wb3J0YW50O1xyXG4gIG1hcmdpbjowIGF1dG8gIWltcG9ydGFudDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xyXG59XHJcbiJdfQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJnci12YWxpZGF0ZS5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"ion-content .logo {\\n  /* width: 30vh; */\\n  height: 30vh;\\n  margin: 0vh auto;\\n  text-align: center;\\n  background: url('socialConnector.jpeg') 0px 0%/100% 100% no-repeat;\\n}\\n\\n.errors {\\n  font-size: small;\\n  color: red !important;\\n  padding-left: 15px;\\n  padding-top: 5px;\\n  padding-bottom: 5px;\\n}\\n\\n.captchaspace {\\n  width: 100%;\\n  overflow: hidden !important;\\n  text-align: center !important;\\n}\\n\\n.white {\\n  margin: 0 auto !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVFO0VBQ0UsaUJBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUVELGtFQUFBO0FBRkg7O0FBU0E7RUFDRSxnQkFBQTtFQUNBLHFCQUFBO0VBRUEsa0JBQUE7RUFDQSxnQkFBQTtFQUNBLG1CQUFBO0FBUEY7O0FBVUE7RUFFRSxXQUFBO0VBQ0EsMkJBQUE7RUFFQSw2QkFBQTtBQVRGOztBQVlBO0VBSUUseUJBQUE7QUFaRiIsImZpbGUiOiJyZWdpc3Rlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jb250ZW50IHtcclxuICAvLyAtLWJhY2tncm91bmQ6ICNmMWVlZTMgIWltcG9ydGFudDtcclxuICAubG9nbyB7XHJcbiAgICAvKiB3aWR0aDogMzB2aDsgKi9cclxuICAgIGhlaWdodDogMzB2aDtcclxuICAgIG1hcmdpbjogMHZoIGF1dG87XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcclxuICAgYmFja2dyb3VuZDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltZy9zb2NpYWxDb25uZWN0b3IuanBlZ1wiKSAwcHggMCUvMTAwJSAxMDAlIG5vLXJlcGVhdDtcclxuICB9XHJcbn1cclxuXHJcbi8vIGlvbi1pdGVtIHtcclxuLy8gICBtYXJnaW4tYm90dG9tOiAyMHB4ICFpbXBvcnRhbnQ7XHJcbi8vIH1cclxuLmVycm9ycyB7XHJcbiAgZm9udC1zaXplOiBzbWFsbDtcclxuICBjb2xvcjogcmVkICFpbXBvcnRhbnQ7XHJcbiAgLy8gYmFja2dyb3VuZDogdmFyKC0taW9uLWNvbG9yLWRhbmdlcik7XHJcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xyXG4gIHBhZGRpbmctdG9wOiA1cHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDVweDtcclxufVxyXG5cclxuLmNhcHRjaGFzcGFjZXtcclxuICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcclxuICB3aWR0aDogMTAwJTtcclxuICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnQ7XHJcbiAgLy8gaGVpZ2h0OiA1MHB4O1xyXG4gIHRleHQtYWxpZ246Y2VudGVyICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcbi53aGl0ZXtcclxuICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcclxuICAvLyBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxuICAvLyB3aWR0aDogNTB2dyAhaW1wb3J0YW50O1xyXG4gIG1hcmdpbjowIGF1dG8gIWltcG9ydGFudDtcclxufVxyXG4iXX0= */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2YWxpZGF0ZS5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<ion-content class=\\\"ion-padding\\\">\\n\\n  <div class=\\\"logo\\\">\\n\\n  </div>\\n  <ion-card>\\n    <ion-card-header>\\n      <!-- <ion-card-title>Welcome</ion-card-title> -->\\n      <ion-card-subtitle class=\\\"ion-text-center\\\">Please Sign in with credentials</ion-card-subtitle>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <form name=\\\"form\\\" #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"loginForm.valid && onSubmit()\\\">\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Email</ion-label>\\n          <ion-input name=\\\"email\\\" [(ngModel)]=\\\"model.email\\\" #email=\\\"ngModel\\\"\\n            pattern=\\\"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\\\"\\n            [ngClass]=\\\"{ 'is-invalid': loginForm.submitted && email.invalid }\\\" required></ion-input>\\n        </ion-item>\\n        <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\" class=\\\"errors\\\">\\n          <span *ngIf=\\\"email.errors?.required\\\">Email is required</span>\\n          <span *ngIf=\\\"email.errors?.pattern\\\">Email is invalid</span>\\n        </div>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Password</ion-label>\\n          <ion-input minlength=\\\"6\\\" name=\\\"password\\\" [(ngModel)]=\\\"model.password\\\" #password=\\\"ngModel\\\"\\n            [ngClass]=\\\"{ 'is-invalid': loginForm.submitted && password.invalid }\\\" required\\n            type=\\\"{{showPass ? 'text' : 'password'}}\\\"></ion-input>\\n          <ion-icon size=\\\"large\\\" style=\\\"margin-top: 16px;\\\" item-end slot=\\\"end\\\" name=\\\"{{showPass ? 'eye-off' : 'eye'}}\\\"\\n            (click)=\\\"showPass=!showPass\\\"></ion-icon>\\n        </ion-item>\\n        <div *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\" class=\\\"errors\\\">\\n          <span *ngIf=\\\"password.errors?.minlength\\\">Password cannot be less than 6 characters</span>\\n          <span *ngIf=\\\"password.errors?.required\\\">Password is required</span>\\n        </div>\\n        <br>\\n        <div class=\\\"captchaspace\\\">\\n          <div class=\\\"white\\\">\\n            <ngx-recaptcha2 #captchaElem [siteKey]=\\\"'6Lfmwq0aAAAAAESadMQxlzNREQ6LCqbrUCmWWDDd'\\\"\\n              (success)=\\\"handleSuccess($event)\\\" [useGlobalDomain]=\\\"false\\\" [size]=\\\"size\\\" [hl]=\\\"lang\\\" [theme]=\\\"theme\\\"\\n              [type]=\\\"type\\\" name=\\\"gresponse\\\" [(ngModel)]=\\\"model.gresponse\\\" #gresponse=\\\"ngModel\\\" required>\\n            </ngx-recaptcha2>\\n          </div>\\n\\n        </div>\\n\\n        <ion-button type=\\\"submit\\\" [disabled]=\\\"!loginForm.valid\\\" expand=\\\"full\\\" color=\\\"primary\\\">Login</ion-button>\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n  <ion-grid fixed>\\n    <ion-row>\\n      <ion-col size=\\\"6\\\">\\n        <h5 class=\\\"ion-text-center\\\" style=\\\"font-size: .9em !important;\\\">\\n          <a [routerLink]=\\\"['/auth/forgot']\\\" routerLinkActive=\\\"router-link-active\\\">Forgot Password?</a>\\n        </h5>\\n      </ion-col>\\n      <ion-col size=\\\"6\\\">\\n        <h5 class=\\\"ion-text-center\\\" style=\\\"font-size: .9em !important;\\\">\\n          <a [routerLink]=\\\"['/auth/register']\\\" routerLinkActive=\\\"router-link-active\\\">Create new Account</a>\\n        </h5>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n\\n</ion-content>\\n\";","export default \"<ion-content class=\\\"ion-padding\\\">\\n  <ion-card  class=\\\"ion-margin-top\\\">\\n    <ion-card-header>\\n      <ion-card-title>We need your Greenroom details in order to verify it's really you.</ion-card-title>\\n      <ion-card-subtitle>Please Follow the following steps</ion-card-subtitle>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-list>\\n        <ion-item>\\n          <ion-icon slot=\\\"start\\\" name=\\\"arrow-forward-circle-outline\\\"></ion-icon>\\n          <ion-label>\\n            <h3 class=\\\"ion-text-wrap\\\">Open your Greenroom app</h3>\\n          </ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-icon slot=\\\"start\\\" name=\\\"arrow-forward-circle-outline\\\"></ion-icon>\\n          <ion-label>\\n            <h3 class=\\\"ion-text-wrap\\\">Enter the code below this line and paste it anywhere in your Greenroom bio*</h3>\\n          </ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-icon slot=\\\"start\\\" name=\\\"arrow-forward-circle-outline\\\"></ion-icon>\\n          <ion-label>\\n            <h1> {{ greenroom_token }} </h1>\\n          </ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-icon slot=\\\"start\\\" name=\\\"arrow-forward-circle-outline\\\"></ion-icon>\\n          <ion-label>\\n            <h3 class=\\\"ion-text-wrap\\\">After saving your bio*, click the \\\"I DID IT\\\" button below:* After completing the verification process,\\n              you can remove the code from your bio.</h3>\\n          </ion-label>\\n        </ion-item>\\n      </ion-list>\\n      <br>\\n      <form name=\\\"form\\\" #validateForm=\\\"ngForm\\\" (ngSubmit)=\\\"validateForm.valid && onSubmit()\\\">\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">First name</ion-label>\\n          <ion-input type=\\\"text\\\" name=\\\"firstname\\\"\\n           [(ngModel)]=\\\"model.firstname\\\"\\n           #firstname=\\\"ngModel\\\"\\n           [ngClass]=\\\"{ 'is-invalid': validateForm.submitted && firstname.invalid }\\\"\\n           required></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Last Name</ion-label>\\n          <ion-input type=\\\"text\\\" name=\\\"lastname\\\"\\n           [(ngModel)]=\\\"model.lastname\\\"\\n           #lastname=\\\"ngModel\\\"\\n           [ngClass]=\\\"{ 'is-invalid': validateForm.submitted && lastname.invalid }\\\"\\n           required></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Username</ion-label>\\n          <ion-input type=\\\"text\\\" name=\\\"ch_username\\\"\\n           [(ngModel)]=\\\"model.ch_username\\\"\\n           #ch_username=\\\"ngModel\\\"\\n           [ngClass]=\\\"{ 'is-invalid': validateForm.submitted && ch_username.invalid }\\\"\\n           required></ion-input>\\n        </ion-item>\\n        <br>\\n        <ion-button type=\\\"submit\\\" [disabled]=\\\"!validateForm.valid\\\" expand=\\\"full\\\" color=\\\"primary\\\">i Did It</ion-button>\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n  <h5 class=\\\"ion-text-center\\\">\\n    <ion-button color=\\\"secondary\\\" (click)=\\\"logOut()\\\" expand=\\\"full\\\">\\n      <ion-icon slot=\\\"start\\\" name=\\\"log-out-outline\\\" ></ion-icon>Log Out\\n    </ion-button>\\n  </h5>\\n</ion-content>\\n\";","export default \"<ion-content class=\\\"ion-padding\\\">\\n\\n  <div class=\\\"logo\\\">\\n\\n  </div>\\n  <ion-card>\\n    <ion-card-header>\\n      <!-- <ion-card-title>Welcome</ion-card-title> -->\\n      <ion-card-subtitle class=\\\"ion-text-center\\\">Please Sign up with credentials</ion-card-subtitle>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <form name=\\\"form\\\" #registerForm=\\\"ngForm\\\" (ngSubmit)=\\\"registerForm.valid && onSubmit()\\\">\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Name</ion-label>\\n          <ion-input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"model.name\\\" #name=\\\"ngModel\\\"\\n            [ngClass]=\\\"{ 'is-invalid': registerForm.submitted && name.invalid }\\\" required></ion-input>\\n        </ion-item>\\n        <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"errors\\\">\\n          <span *ngIf=\\\"name.errors?.required\\\">Name is required</span>\\n          <!-- <span *ngIf=\\\"name.errors?.pattern\\\">Name is invalid</span> -->\\n        </div>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Email</ion-label>\\n          <ion-input type=\\\"email\\\" name=\\\"email\\\" aria-autocomplete=\\\"email\\\" autocomplete=\\\"email\\\" name=\\\"email\\\"\\n            [(ngModel)]=\\\"model.email\\\" #email=\\\"ngModel\\\" pattern=\\\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}$\\\"\\n            [ngClass]=\\\"{ 'is-invalid': registerForm.submitted && email.invalid }\\\" required></ion-input>\\n        </ion-item>\\n        <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\" class=\\\"errors\\\">\\n          <span *ngIf=\\\"email.errors?.required\\\">Email is required</span>\\n          <span *ngIf=\\\"email.errors?.pattern\\\">Email is invalid</span>\\n        </div>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Password</ion-label>\\n          <ion-input name=\\\"password\\\" type=\\\"{{showPass ? 'text' : 'password'}}\\\" minlength=\\\"6\\\" name=\\\"password\\\"\\n            autocomplete=\\\"password\\\" aria-autocomplete=\\\"password\\\" [(ngModel)]=\\\"model.password\\\" #password=\\\"ngModel\\\"\\n            [ngClass]=\\\"{ 'is-invalid': registerForm.submitted && password.invalid }\\\" required></ion-input>\\n          <ion-icon size=\\\"large\\\" style=\\\"margin-top: 16px;\\\" item-end slot=\\\"end\\\" name=\\\"{{showPass ? 'eye-off' :'eye'}}\\\"\\n            (click)=\\\"showPass=!showPass\\\"></ion-icon>\\n        </ion-item>\\n        <div *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\" class=\\\"errors\\\">\\n          <span *ngIf=\\\"password.errors?.minlength\\\">Password cannot be less than 6 characters</span>\\n          <span *ngIf=\\\"password.errors?.required\\\">Password is required</span>\\n        </div>\\n        <br>\\n        <div class=\\\"captchaspace\\\">\\n          <div class=\\\"white\\\">\\n            <ngx-recaptcha2 #captchaElem [siteKey]=\\\"'6Lfmwq0aAAAAAESadMQxlzNREQ6LCqbrUCmWWDDd'\\\"\\n              (success)=\\\"handleSuccess($event)\\\" [useGlobalDomain]=\\\"false\\\" [size]=\\\"size\\\" [hl]=\\\"lang\\\" [theme]=\\\"theme\\\"\\n              [type]=\\\"type\\\" name=\\\"gresponse\\\" [(ngModel)]=\\\"model.gresponse\\\" #gresponse=\\\"ngModel\\\">\\n            </ngx-recaptcha2>\\n          </div>\\n\\n        </div>\\n\\n        <ion-button type=\\\"submit\\\" [disabled]=\\\"!registerForm.valid\\\" expand=\\\"full\\\" color=\\\"primary\\\">Register</ion-button>\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n  <h5 class=\\\"ion-text-center\\\" style=\\\"font-size: .8em !important;\\\">\\n    <a [routerLink]=\\\"['/auth']\\\" routerLinkActive=\\\"router-link-active\\\">Sign In</a>\\n  </h5>\\n</ion-content>\\n\";","export default \"<ion-content class=\\\"ion-padding\\\">\\n  <div style=\\\"height: 3vh; margin: 2vh auto;\\\"></div>\\n  <ion-card >\\n    <ion-card-header>\\n      <ion-card-title>We need your Clubhouse username in order to verify it's really you.</ion-card-title>\\n      <ion-card-subtitle>Please Follow the following steps</ion-card-subtitle>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-list>\\n        <ion-item>\\n          <ion-icon slot=\\\"start\\\" name=\\\"arrow-forward-circle-outline\\\"></ion-icon>\\n          <ion-label>\\n            <h3 class=\\\"ion-text-wrap\\\">Open your Clubhouse app</h3>\\n          </ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-icon slot=\\\"start\\\" name=\\\"arrow-forward-circle-outline\\\"></ion-icon>\\n          <ion-label>\\n            <h3 class=\\\"ion-text-wrap\\\">Enter the code below this line and paste it anywhere in your Clubhouse bio*</h3>\\n          </ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-icon slot=\\\"start\\\" name=\\\"arrow-forward-circle-outline\\\"></ion-icon>\\n          <ion-label>\\n            <h1> {{ ch_token }} </h1>\\n          </ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-icon slot=\\\"start\\\" name=\\\"arrow-forward-circle-outline\\\"></ion-icon>\\n          <ion-label>\\n            <h3 class=\\\"ion-text-wrap\\\">After saving your bio*, click the \\\"I DID IT\\\" button below:* After completing the verification process,\\n              you can remove the code from your bio.</h3>\\n          </ion-label>\\n        </ion-item>\\n      </ion-list>\\n      <br>\\n      <form name=\\\"form\\\" #validateForm=\\\"ngForm\\\" (ngSubmit)=\\\"validateForm.valid && onSubmit()\\\">\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Clubhouse Username</ion-label>\\n          <ion-input type=\\\"text\\\" name=\\\"ch_username\\\"\\n           [(ngModel)]=\\\"model.ch_username\\\"\\n           #ch_username=\\\"ngModel\\\"\\n           [ngClass]=\\\"{ 'is-invalid': validateForm.submitted && ch_username.invalid }\\\"\\n           required></ion-input>\\n        </ion-item>\\n        <br>\\n        <ion-button type=\\\"submit\\\" [disabled]=\\\"!validateForm.valid\\\" expand=\\\"full\\\" color=\\\"primary\\\">i Did It</ion-button>\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n  <h5 class=\\\"ion-text-center\\\">\\n    <ion-button color=\\\"secondary\\\" (click)=\\\"logOut()\\\" expand=\\\"full\\\">\\n      <ion-icon slot=\\\"start\\\" name=\\\"log-out-outline\\\" ></ion-icon>Log Out\\n    </ion-button>\\n  </h5>\\n</ion-content>\\n\";"],"sourceRoot":"webpack:///"}